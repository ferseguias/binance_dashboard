# ¿Por qué? 🤷🏽‍♂️
La principal motivación para realizar este proyecto fue cubrir una necesidad de la mayoria de los invesores de contar con un resumen de sus transacciones actualizado sin necesidad de realizar ningún trabajo manual por su puesto.

Cree este dashbord resumen partiendo de un reporte extraido de la plataforma Binance (crypto exchange), cualquier usuario podría insertar su reporte de transacciones historico para obtener su dashboard en streamlit personalizado de manera automática.

Similar a fintonic app o el analisis de gastos ING o cualquier banco.

El file.csv que voy a mostrar no es real, incluye transacciones inventadas para mantener la privacidad.

df_new.xlsx

# Herramientas 🔧
[streamlit](https://docs.streamlit.io/) dashboard

[pandas](https://pandas.pydata.org/) analisis de datos

[binance API](https://binance-docs.github.io/apidocs/spot/en/#change-log) precios

[yahoo finance](https://pypi.org/project/yfinance/) precios

[matplotlib](https://matplotlib.org/) visualización

[seaborn](https://seaborn.pydata.org/) visualización

[plotly](https://plotly.com/python/) visualización

[fbPROPHET](https://facebook.github.io/prophet/docs/quick_start.html) predicciones

# Streamlit 📊
BINANCE REPORT --> ALL ACCOUNTS (30S)

BINANCE REPORT --> SPOT --> OVERVIEW (30S)

BINANCE REPORT --> SPOT --> TRADES PER COIN (60S - COINS: AAVE/ETH)

BINANCE REPORT --> SPOT --> VALUE/FUNDING (30S)

BINANCE REPORT --> FUTURES (60S)

BINANCE REPORT --> BINANCE CARD (60S)

PREDICTIONS --> INTRO (30S)

PREDICTIONS --> LONG/SHORT TERM (90S - COINS: BTC/SOL)

# Nest steps 🚶🏽‍♂️
Basicamente sería resolver las limitantes del proyecto:

1. Incluir los precios segundo a segundo para tener los análisis 100% finos.

2. Alimentar el código con todas las posibles transacciones para que pueda leer cualquier reporte.

3. Crear un interfaz para obtener los csv (sin identificación de usuario para mantener la privacidad) que suba la gente una vez funcione el producto.



